//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace SecretHub {

public class Client : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Client(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Client obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~Client() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          SecretHubXGOPINVOKE.delete_Client(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public void ExportEnv(System.Collections.Generic.Dictionary<string,string> env) {
      foreach(System.Collections.Generic.KeyValuePair<string, string> envVar in env) {
          System.Environment.SetEnvironmentVariable(envVar.Key, envVar.Value);
      }
  }

  public Client() : this(SecretHubXGOPINVOKE.new_Client(), true) {
    if (SecretHubXGOPINVOKE.SWIGPendingException.Pending) throw SecretHubXGOPINVOKE.SWIGPendingException.Retrieve();
  }

  public SecretVersion Read(string path) {
    SecretVersion ret = new SecretVersion(SecretHubXGOPINVOKE.Client_Read(swigCPtr, path), true);
    if (SecretHubXGOPINVOKE.SWIGPendingException.Pending) throw SecretHubXGOPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string ReadString(string path) {
    string ret = SecretHubXGOPINVOKE.Client_ReadString(swigCPtr, path);
    if (SecretHubXGOPINVOKE.SWIGPendingException.Pending) throw SecretHubXGOPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string Resolve(string path) {
    string ret = SecretHubXGOPINVOKE.Client_Resolve(swigCPtr, path);
    if (SecretHubXGOPINVOKE.SWIGPendingException.Pending) throw SecretHubXGOPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public System.Collections.Generic.Dictionary<string,string> ResolveEnv() {
    var temp = SecretHubXGOPINVOKE.Client_ResolveEnv(swigCPtr);
    
    if (SecretHubXGOPINVOKE.SWIGPendingException.Pending) throw SecretHubXGOPINVOKE.SWIGPendingException.Retrieve();
    var res = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.Generic.Dictionary<string, string>>(temp);
    
    if (SecretHubXGOPINVOKE.SWIGPendingException.Pending) throw SecretHubXGOPINVOKE.SWIGPendingException.Retrieve();
    return res;
}

  public bool Exists(string path) {
    bool ret = SecretHubXGOPINVOKE.Client_Exists(swigCPtr, path);
    if (SecretHubXGOPINVOKE.SWIGPendingException.Pending) throw SecretHubXGOPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void Remove(string path) {
    SecretHubXGOPINVOKE.Client_Remove(swigCPtr, path);
    if (SecretHubXGOPINVOKE.SWIGPendingException.Pending) throw SecretHubXGOPINVOKE.SWIGPendingException.Retrieve();
  }

  public void Write(string path, string secret) {
    SecretHubXGOPINVOKE.Client_Write(swigCPtr, path, secret);
    if (SecretHubXGOPINVOKE.SWIGPendingException.Pending) throw SecretHubXGOPINVOKE.SWIGPendingException.Retrieve();
  }

}

}
