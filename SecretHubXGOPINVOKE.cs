//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace SecretHub {

class SecretHubXGOPINVOKE {

  protected class SWIGExceptionHelper {

    public delegate void ExceptionDelegate(string message);
    public delegate void ExceptionArgumentDelegate(string message, string paramName);

    static ExceptionDelegate applicationDelegate = new ExceptionDelegate(SetPendingApplicationException);
    static ExceptionDelegate arithmeticDelegate = new ExceptionDelegate(SetPendingArithmeticException);
    static ExceptionDelegate divideByZeroDelegate = new ExceptionDelegate(SetPendingDivideByZeroException);
    static ExceptionDelegate indexOutOfRangeDelegate = new ExceptionDelegate(SetPendingIndexOutOfRangeException);
    static ExceptionDelegate invalidCastDelegate = new ExceptionDelegate(SetPendingInvalidCastException);
    static ExceptionDelegate invalidOperationDelegate = new ExceptionDelegate(SetPendingInvalidOperationException);
    static ExceptionDelegate ioDelegate = new ExceptionDelegate(SetPendingIOException);
    static ExceptionDelegate nullReferenceDelegate = new ExceptionDelegate(SetPendingNullReferenceException);
    static ExceptionDelegate outOfMemoryDelegate = new ExceptionDelegate(SetPendingOutOfMemoryException);
    static ExceptionDelegate overflowDelegate = new ExceptionDelegate(SetPendingOverflowException);
    static ExceptionDelegate systemDelegate = new ExceptionDelegate(SetPendingSystemException);

    static ExceptionArgumentDelegate argumentDelegate = new ExceptionArgumentDelegate(SetPendingArgumentException);
    static ExceptionArgumentDelegate argumentNullDelegate = new ExceptionArgumentDelegate(SetPendingArgumentNullException);
    static ExceptionArgumentDelegate argumentOutOfRangeDelegate = new ExceptionArgumentDelegate(SetPendingArgumentOutOfRangeException);

    [global::System.Runtime.InteropServices.DllImport("SecretHubXGO", EntryPoint="SWIGRegisterExceptionCallbacks_SecretHubXGO")]
    public static extern void SWIGRegisterExceptionCallbacks_SecretHubXGO(
                                ExceptionDelegate applicationDelegate,
                                ExceptionDelegate arithmeticDelegate,
                                ExceptionDelegate divideByZeroDelegate, 
                                ExceptionDelegate indexOutOfRangeDelegate, 
                                ExceptionDelegate invalidCastDelegate,
                                ExceptionDelegate invalidOperationDelegate,
                                ExceptionDelegate ioDelegate,
                                ExceptionDelegate nullReferenceDelegate,
                                ExceptionDelegate outOfMemoryDelegate, 
                                ExceptionDelegate overflowDelegate, 
                                ExceptionDelegate systemExceptionDelegate);

    [global::System.Runtime.InteropServices.DllImport("SecretHubXGO", EntryPoint="SWIGRegisterExceptionArgumentCallbacks_SecretHubXGO")]
    public static extern void SWIGRegisterExceptionCallbacksArgument_SecretHubXGO(
                                ExceptionArgumentDelegate argumentDelegate,
                                ExceptionArgumentDelegate argumentNullDelegate,
                                ExceptionArgumentDelegate argumentOutOfRangeDelegate);

    static void SetPendingApplicationException(string message) {
      SWIGPendingException.Set(new global::System.ApplicationException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingArithmeticException(string message) {
      SWIGPendingException.Set(new global::System.ArithmeticException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingDivideByZeroException(string message) {
      SWIGPendingException.Set(new global::System.DivideByZeroException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingIndexOutOfRangeException(string message) {
      SWIGPendingException.Set(new global::System.IndexOutOfRangeException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingInvalidCastException(string message) {
      SWIGPendingException.Set(new global::System.InvalidCastException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingInvalidOperationException(string message) {
      SWIGPendingException.Set(new global::System.InvalidOperationException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingIOException(string message) {
      SWIGPendingException.Set(new global::System.IO.IOException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingNullReferenceException(string message) {
      SWIGPendingException.Set(new global::System.NullReferenceException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingOutOfMemoryException(string message) {
      SWIGPendingException.Set(new global::System.OutOfMemoryException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingOverflowException(string message) {
      SWIGPendingException.Set(new global::System.OverflowException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingSystemException(string message) {
      SWIGPendingException.Set(new global::System.SystemException(message, SWIGPendingException.Retrieve()));
    }

    static void SetPendingArgumentException(string message, string paramName) {
      SWIGPendingException.Set(new global::System.ArgumentException(message, paramName, SWIGPendingException.Retrieve()));
    }
    static void SetPendingArgumentNullException(string message, string paramName) {
      global::System.Exception e = SWIGPendingException.Retrieve();
      if (e != null) message = message + " Inner Exception: " + e.Message;
      SWIGPendingException.Set(new global::System.ArgumentNullException(paramName, message));
    }
    static void SetPendingArgumentOutOfRangeException(string message, string paramName) {
      global::System.Exception e = SWIGPendingException.Retrieve();
      if (e != null) message = message + " Inner Exception: " + e.Message;
      SWIGPendingException.Set(new global::System.ArgumentOutOfRangeException(paramName, message));
    }

    static SWIGExceptionHelper() {
      SWIGRegisterExceptionCallbacks_SecretHubXGO(
                                applicationDelegate,
                                arithmeticDelegate,
                                divideByZeroDelegate,
                                indexOutOfRangeDelegate,
                                invalidCastDelegate,
                                invalidOperationDelegate,
                                ioDelegate,
                                nullReferenceDelegate,
                                outOfMemoryDelegate,
                                overflowDelegate,
                                systemDelegate);

      SWIGRegisterExceptionCallbacksArgument_SecretHubXGO(
                                argumentDelegate,
                                argumentNullDelegate,
                                argumentOutOfRangeDelegate);
    }
  }

  protected static SWIGExceptionHelper swigExceptionHelper = new SWIGExceptionHelper();

  public class SWIGPendingException {
    [global::System.ThreadStatic]
    private static global::System.Exception pendingException = null;
    private static int numExceptionsPending = 0;
    private static global::System.Object exceptionsLock = null;

    public static bool Pending {
      get {
        bool pending = false;
        if (numExceptionsPending > 0)
          if (pendingException != null)
            pending = true;
        return pending;
      } 
    }

    public static void Set(global::System.Exception e) {
      if (pendingException != null)
        throw new global::System.ApplicationException("FATAL: An earlier pending exception from unmanaged code was missed and thus not thrown (" + pendingException.ToString() + ")", e);
      pendingException = e;
      lock(exceptionsLock) {
        numExceptionsPending++;
      }
    }

    public static global::System.Exception Retrieve() {
      global::System.Exception e = null;
      if (numExceptionsPending > 0) {
        if (pendingException != null) {
          e = pendingException;
          pendingException = null;
          lock(exceptionsLock) {
            numExceptionsPending--;
          }
        }
      }
      return e;
    }

    static SWIGPendingException() {
      exceptionsLock = new global::System.Object();
    }
  }


  protected class SWIGStringHelper {

    public delegate string SWIGStringDelegate(string message);
    static SWIGStringDelegate stringDelegate = new SWIGStringDelegate(CreateString);

    [global::System.Runtime.InteropServices.DllImport("SecretHubXGO", EntryPoint="SWIGRegisterStringCallback_SecretHubXGO")]
    public static extern void SWIGRegisterStringCallback_SecretHubXGO(SWIGStringDelegate stringDelegate);

    static string CreateString(string cString) {
      return cString;
    }

    static SWIGStringHelper() {
      SWIGRegisterStringCallback_SecretHubXGO(stringDelegate);
    }
  }

  static protected SWIGStringHelper swigStringHelper = new SWIGStringHelper();


  static SecretHubXGOPINVOKE() {
  }


  [global::System.Runtime.InteropServices.DllImport("SecretHubXGO", EntryPoint="CSharp_SecretHub_new_Client")]
  public static extern global::System.IntPtr new_Client();

  [global::System.Runtime.InteropServices.DllImport("SecretHubXGO", EntryPoint="CSharp_SecretHub_delete_Client")]
  public static extern void delete_Client(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("SecretHubXGO", EntryPoint="CSharp_SecretHub_Client_Read")]
  public static extern global::System.IntPtr Client_Read(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("SecretHubXGO", EntryPoint="CSharp_SecretHub_Client_ReadString")]
  public static extern string Client_ReadString(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("SecretHubXGO", EntryPoint="CSharp_SecretHub_Client_Resolve")]
  public static extern string Client_Resolve(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("SecretHubXGO", EntryPoint="CSharp_SecretHub_Client_ResolveEnv")]
  public static extern string Client_ResolveEnv(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("SecretHubXGO", EntryPoint="CSharp_SecretHub_Client_Exists")]
  public static extern bool Client_Exists(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("SecretHubXGO", EntryPoint="CSharp_SecretHub_Client_Remove")]
  public static extern void Client_Remove(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("SecretHubXGO", EntryPoint="CSharp_SecretHub_Client_Write")]
  public static extern void Client_Write(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, string jarg3);

  [global::System.Runtime.InteropServices.DllImport("SecretHubXGO", EntryPoint="CSharp_SecretHub_Secret_SecretID_set")]
  public static extern void Secret_SecretID_set(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("SecretHubXGO", EntryPoint="CSharp_SecretHub_Secret_SecretID_get")]
  public static extern string Secret_SecretID_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("SecretHubXGO", EntryPoint="CSharp_SecretHub_Secret_DirID_set")]
  public static extern void Secret_DirID_set(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("SecretHubXGO", EntryPoint="CSharp_SecretHub_Secret_DirID_get")]
  public static extern string Secret_DirID_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("SecretHubXGO", EntryPoint="CSharp_SecretHub_Secret_RepoID_set")]
  public static extern void Secret_RepoID_set(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("SecretHubXGO", EntryPoint="CSharp_SecretHub_Secret_RepoID_get")]
  public static extern string Secret_RepoID_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("SecretHubXGO", EntryPoint="CSharp_SecretHub_Secret_Name_set")]
  public static extern void Secret_Name_set(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("SecretHubXGO", EntryPoint="CSharp_SecretHub_Secret_Name_get")]
  public static extern string Secret_Name_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("SecretHubXGO", EntryPoint="CSharp_SecretHub_Secret_BlindName_set")]
  public static extern void Secret_BlindName_set(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("SecretHubXGO", EntryPoint="CSharp_SecretHub_Secret_BlindName_get")]
  public static extern string Secret_BlindName_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("SecretHubXGO", EntryPoint="CSharp_SecretHub_Secret_VersionCount_set")]
  public static extern void Secret_VersionCount_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("SecretHubXGO", EntryPoint="CSharp_SecretHub_Secret_VersionCount_get")]
  public static extern int Secret_VersionCount_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("SecretHubXGO", EntryPoint="CSharp_SecretHub_Secret_LatestVersion_set")]
  public static extern void Secret_LatestVersion_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("SecretHubXGO", EntryPoint="CSharp_SecretHub_Secret_LatestVersion_get")]
  public static extern int Secret_LatestVersion_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("SecretHubXGO", EntryPoint="CSharp_SecretHub_Secret_Status_set")]
  public static extern void Secret_Status_set(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("SecretHubXGO", EntryPoint="CSharp_SecretHub_Secret_Status_get")]
  public static extern string Secret_Status_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("SecretHubXGO", EntryPoint="CSharp_SecretHub_Secret_CreatedAt_set")]
  public static extern void Secret_CreatedAt_set(global::System.Runtime.InteropServices.HandleRef jarg1, long jarg2);

  [global::System.Runtime.InteropServices.DllImport("SecretHubXGO", EntryPoint="CSharp_SecretHub_Secret_CreatedAt_get")]
  public static extern long Secret_CreatedAt_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("SecretHubXGO", EntryPoint="CSharp_SecretHub_new_Secret")]
  public static extern global::System.IntPtr new_Secret();

  [global::System.Runtime.InteropServices.DllImport("SecretHubXGO", EntryPoint="CSharp_SecretHub_delete_Secret")]
  public static extern void delete_Secret(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("SecretHubXGO", EntryPoint="CSharp_SecretHub_SecretVersion_SecretVersionID_set")]
  public static extern void SecretVersion_SecretVersionID_set(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("SecretHubXGO", EntryPoint="CSharp_SecretHub_SecretVersion_SecretVersionID_get")]
  public static extern string SecretVersion_SecretVersionID_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("SecretHubXGO", EntryPoint="CSharp_SecretHub_SecretVersion_Secret_set")]
  public static extern void SecretVersion_Secret_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("SecretHubXGO", EntryPoint="CSharp_SecretHub_SecretVersion_Secret_get")]
  public static extern global::System.IntPtr SecretVersion_Secret_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("SecretHubXGO", EntryPoint="CSharp_SecretHub_SecretVersion_Version_set")]
  public static extern void SecretVersion_Version_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("SecretHubXGO", EntryPoint="CSharp_SecretHub_SecretVersion_Version_get")]
  public static extern int SecretVersion_Version_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("SecretHubXGO", EntryPoint="CSharp_SecretHub_SecretVersion_Data_set")]
  public static extern void SecretVersion_Data_set(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("SecretHubXGO", EntryPoint="CSharp_SecretHub_SecretVersion_Data_get")]
  public static extern string SecretVersion_Data_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("SecretHubXGO", EntryPoint="CSharp_SecretHub_SecretVersion_CreatedAt_set")]
  public static extern void SecretVersion_CreatedAt_set(global::System.Runtime.InteropServices.HandleRef jarg1, long jarg2);

  [global::System.Runtime.InteropServices.DllImport("SecretHubXGO", EntryPoint="CSharp_SecretHub_SecretVersion_CreatedAt_get")]
  public static extern long SecretVersion_CreatedAt_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("SecretHubXGO", EntryPoint="CSharp_SecretHub_SecretVersion_Status_set")]
  public static extern void SecretVersion_Status_set(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("SecretHubXGO", EntryPoint="CSharp_SecretHub_SecretVersion_Status_get")]
  public static extern string SecretVersion_Status_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("SecretHubXGO", EntryPoint="CSharp_SecretHub_new_SecretVersion")]
  public static extern global::System.IntPtr new_SecretVersion();

  [global::System.Runtime.InteropServices.DllImport("SecretHubXGO", EntryPoint="CSharp_SecretHub_delete_SecretVersion")]
  public static extern void delete_SecretVersion(global::System.Runtime.InteropServices.HandleRef jarg1);
}

}
